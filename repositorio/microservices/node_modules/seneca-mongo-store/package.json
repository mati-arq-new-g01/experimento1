{
  "name": "seneca-mongo-store",
  "version": "0.2.0",
  "description": "Seneca data store plugin for MongoDB",
  "main": "mongo-store.js",
  "scripts": {
    "test": "./node_modules/.bin/mocha test/*.test.js"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/rjrodger/seneca-mongo-store"
  },
  "keywords": [
    "seneca",
    "plugin",
    "store",
    "mongo",
    "mongodb",
    "json"
  ],
  "author": {
    "name": "Richard Rodger",
    "url": "http://richardrodger.com"
  },
  "contributors": [
    {
      "name": "Richard Rodger",
      "url": "http://richardrodger.com"
    },
    {
      "name": "Peter Elger",
      "url": "https://github.com/pelger"
    },
    {
      "name": "Cristian Ianto",
      "url": "https://github.com/iantocristian"
    },
    {
      "name": "Mircea Alexandru",
      "url": "https://github.com/mirceaalexandru"
    }
  ],
  "license": "MIT",
  "dependencies": {
    "lodash": "~2.4.1",
    "mongodb": "~1.4.30"
  },
  "devDependencies": {
    "async": "~0.9.0",
    "seneca": "plugin",
    "mocha": "~1.20.1",
    "seneca-store-test": "~0.2.2"
  },
  "files": [
    "LICENSE.txt",
    "README.md",
    "mongo-store.js"
  ],
  "readme": "# seneca-mongo-store\n\n### Seneca node.js data-storage plugin for MongoDB.\n\nThis module is a plugin for the Seneca framework. It provides a\nstorage engine that uses MongoDB to persist data. This module is for production use.\nIt also provides an example of a document-oriented storage plugin code-base.\n\nThe Seneca framework provides an \n[ActiveRecord-style data storage API](http://senecajs.org/data-entities.html). \nEach supported database has a plugin, such as this one, that\nprovides the underlying Seneca plugin actions required for data\npersistence.\n\n\n### Support\n\nIf you're using this module, feel free to contact me on twitter if you\nhave any questions! :) [@rjrodger](http://twitter.com/rjrodger)\n\nCurrent Version: 0.2.0\n\nTested on: Node 0.10.36, Seneca 0.6.1\n\n\n\n### Quick example\n\n```JavaScript\nvar seneca = require('seneca')()\nseneca.use('mongo-store',{\n  name:'dbname',\n  host:'127.0.0.1',\n  port:27017\n})\n\nseneca.ready(function(){\n  var apple = seneca.make$('fruit')\n  apple.name  = 'Pink Lady'\n  apple.price = 0.99\n  apple.save$(function(err,apple){\n    console.log( \"apple.id = \"+apple.id  )\n  })\n})\n```\n\n\n## Install\n\n```sh\nnpm install seneca\nnpm install seneca-mongo-store\n```\n\n\n## Usage\n\nYou don't use this module directly. It provides an underlying data storage engine for the Seneca entity API:\n\n```JavaScript\nvar entity = seneca.make$('typename')\nentity.someproperty = \"something\"\nentity.anotherproperty = 100\n\nentity.save$( function(err,entity){ ... } )\nentity.load$( {id: ...}, function(err,entity){ ... } )\nentity.list$( {property: ...}, function(err,entity){ ... } )\nentity.remove$( {id: ...}, function(err,entity){ ... } )\n```\n\n\n### Queries\n\nThe standard Seneca query format is supported:\n\n   * `entity.list$({field1:value1, field2:value2, ...})` implies pseudo-query `field1==value1 AND field2==value2, ...`\n   * you can only do AND queries. That's all folks. Ya'll can go home now. The Fat Lady has sung.\n   * `entity.list$({f1:v1,...},{sort$:{field1:1}})` means sort by field1, ascending\n   * `entity.list$({f1:v1,...},{sort$:{field1:-1}})` means sort by field1, descending\n   * `entity.list$({f1:v1,...},{limit$:10})` means only return 10 results\n   * `entity.list$({f1:v1,...},{skip$:5})` means skip the first 5\n   * `entity.list$({f1:v1,...},{fields$:['field1','field2']})` means only return the listed fields (avoids pulling lots of data out of the database)\n   * you can use sort$, limit$, skip$ and fields$ together\n   * `entity.list$({f1:v1,...},{native$:[{-mongo-query-},{-mongo-options-}]})` allows you to specify a native mongo query, as per [node-mongodb-native](http://mongodb.github.com/node-mongodb-native/markdown-docs/queries.html) \n\n\n### Native Driver\n\nAs with all seneca stores, you can access the native driver, in this case, \nthe `node-mongodb-native` `collection` object using `entity.native$(function(err,collection){...})`.\n\nHow to write this SQL query using Mongo aggregate in Seneca:\n\n```SQL\n// SELECT cust_id, count(*) FROM orders GROUP BY cust_id HAVING count(*) > 1\n```\n\n```JavaScript\nvar aggregateQuery = [{ $group: { _id: \"$cust_id\", count: { $sum: 1 } } }, { $match: { count: { $gt: 1 } } } ];\n\norders_ent.native$(function(err, db){\n\tvar collection = db.collection('orders');\n\tcollection.aggregate(aggregateQuery, function(err, list){\n\t\tif(err) return done(err);\n\t\tconsole.log(\"Found records:\", list);\n\t\t// ...\n\t\t\t\t\t\t\n\t}); // end aggregate \n}); // end native$\n````\n\n## Test\n\n```bash\ncd test\nmocha mongo.test.js --seneca.log.print\n```\n\n\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/rjrodger/seneca-mongo-store/issues"
  },
  "_id": "seneca-mongo-store@0.2.0",
  "dist": {
    "shasum": "efa95ccb54e2f497113798f71ba53fba66d0c71f"
  },
  "_from": "seneca-mongo-store@",
  "_resolved": "https://registry.npmjs.org/seneca-mongo-store/-/seneca-mongo-store-0.2.0.tgz"
}
